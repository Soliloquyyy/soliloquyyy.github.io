(this["webpackJsonpmy-app"]=this["webpackJsonpmy-app"]||[]).push([[0],{17:function(e,t,a){e.exports=a(33)},22:function(e,t,a){},23:function(e,t,a){e.exports=a.p+"static/media/logo.25bf045c.svg"},24:function(e,t,a){},25:function(e,t,a){},31:function(e,t,a){},33:function(e,t,a){"use strict";a.r(t);var n=a(0),l=a.n(n),r=a(15),i=a.n(r),o=(a(22),a(23),a(24),a(25),a(5)),s=a(2);var c=function(){Object(o.b)({opacity:.5,marginTop:0,config:{delay:1e3,duration:1200},from:{opacity:0,marginTop:-25}});var e={height:"3rem",fontSize:window.innerWidth<=760?"50%":"150%",marginTop:"1rem",backgroundColor:"#282c34"};return l.a.createElement(o.a.ul,{className:"nav justify-content-center position-relative",style:e},l.a.createElement("li",null,l.a.createElement(s.b,{exact:!0,to:"/",className:"nav-item nav-link d-inline-block",activeClassName:"nav-item nav-link active d-inline-block"},"Home"),l.a.createElement(s.b,{exact:!0,to:"/computer",className:"nav-item nav-link d-inline-block",activeClassName:"nav-item nav-link active d-inline-block"},"Computer"),l.a.createElement(s.b,{exact:!0,to:"/photography",className:"nav-item nav-link d-inline-block",activeClassName:"nav-item nav-link active d-inline-block"},"Photography"),l.a.createElement(s.b,{exact:!0,to:"/about",className:"nav-item nav-link d-inline-block",activeClassName:"nav-item nav-link active d-inline-block"},"About")))},u=a(3),m=(a(31),function(e){var t=e.children;return l.a.createElement("div",{className:"position-absolute ",style:{backgroundColor:"#282c34",color:"white",width:"100%",height:"100%"}},t)}),d=function(e){return l.a.createElement("div",{class:"position-relative d-flex flex-column border-dark justify-content-around"},l.a.createElement("div",{class:"position-relative p-2 d-flex flex-row justify-content-center",style:{margin:"1rem"}},e.children))},h=function(e){var t=window.innerWidth<=760,a={fontSize:t?"120%":"200%"},n={fontSize:t?"70%":"100%"},r={backgroundColor:"#708090",width:t?"90%":"80%"};return l.a.createElement("div",{className:"position-relative p-2 d-flex flex-column border-dark rounded",style:r},l.a.createElement("h1",{style:a},l.a.createElement(s.b,{exact:!0,to:e.link},e.children[0])),l.a.createElement("p",{style:n},e.children[1]))};var p=function(){var e={fontSize:window.innerWidth<=760?"100%":"200%"},t={fontSize:window.innerWidth<=760?"50%":"100%"};return l.a.createElement(l.a.Fragment,null,l.a.createElement(m,null,l.a.createElement(d,null,l.a.createElement("div",{className:"position-relative p-2 d-flex flex-column border-dark rounded",style:{backgroundColor:"#708090",width:"50%"}},l.a.createElement("h1",{style:e,className:"text-center mx-auto m-1"},"Welcome to my page"),l.a.createElement("p",{style:t},"Hello, my name is Quy. I am a graduate from UCSD that majored in Mathematics and Computer Science. I love developing software that help me learn a particular subject. You might see many different projects that cater to different subjects in computer science here.  Please checkout my porfolio using the navigation bar.",l.a.createElement("br",null),"I also love photography and do amature photography in my free times. I will slowly upload my porfolio for it here soon.",l.a.createElement("br",null),"PS: I am still updating this website regularly.")))))};var f=function(){var e={fontSize:window.innerWidth<=760?"100%":"200%"};return window.innerWidth,l.a.createElement(m,null,l.a.createElement(d,null,l.a.createElement("div",{className:"position-relative p-2 d-flex flex-column border-dark rounded",style:{backgroundColor:"#708090",width:"50%"}},l.a.createElement("h1",{style:e,className:"text-center mx-auto m-1"},"Under Construction"))))};var g=function(){return l.a.createElement(m,null,l.a.createElement(d,null,l.a.createElement(h,{link:"computer/1"},"RGB Lightstrip Music Visualizer Without Using Stereo Mix","A music visualizer that uses any addressable rgb strip and a micro controler such as the arduino.This project aims to process audio signal without having to use Stereo Mix(More info on why inside).It uses WASPAI to capture playback audio to process with FFT.")),l.a.createElement(d,null,l.a.createElement(h,{link:"computer/2"},"Distributed Ray Tracing","Implementation of Distributed Ray Tracing on an existing CPU ray tracing project and creation of Bezier Patches. Utilized OpenGL, KDTree Bounding boxes, Bezier Patches, Ray Tracing")),l.a.createElement(d,null,l.a.createElement(h,{link:"computer/3"},"Shader Program Projects","Various Shader Project that aims to show shader mastery. Includes: Post-Processing Shader, Fragment Water Wave Shader, Geometry Shader, and many more. Used OpenGL.")),l.a.createElement(d,null,l.a.createElement(h,{link:"computer/4"},"ThoBot: Multipurpose Discord Bot","A Multipurpose Bot to help manage Discord Community and also to bring entertainment for the users. Include feature such as automatic role assignment upon joining, Youtube API search calls, Reddit Post Tracker, Playable Chat Games and many more")),l.a.createElement(d,null,l.a.createElement(h,{link:"computer/5"},"2048 Remake with JavaFX","A replica of the game '2048'. Implemented in JavaFX. The project aims to showcase Java familiarity but also GUI skills. This also include feature to end game at any score as oppose to the original 2048")),l.a.createElement(d,null,l.a.createElement(h,{link:"computer/6"},"KDTree(2D) implementation Using BST and C++ Template","An full implementation of a KDTree with BST using C++ template. It is implemented as 2DTree but since it is using C++ template it can easily be modify to work with any dimension by passing in the comparision function")),l.a.createElement(d,null,l.a.createElement(h,{link:"computer/7"},"Game of Life simulation on Command Lines using ARM and C","Implementation of Game of Life in ARM as the logic and C as the interface to user. This project aims to improve my understanding of ARM and Assembly languages and how they work behind the hood")),l.a.createElement(d,null,l.a.createElement(h,{link:"computer/8"},"Six Degree of Separation Finder","A more generalized version of Six Degree of Kevin Bacon. This version aims to find ind the shortest sequence of shared movies between two actors from a given list. Utilized: Graph, Pathfinding")),l.a.createElement(d,null,l.a.createElement(h,{link:"computer/9"},"Document Generator and Autocomplete words","A probabilistic document generator that takes input of an existing text and generate a document based on the probablity of any words that goes after it. The Autocomplete part is a simple implementation of a Multi-Way Trie that predict the ending of the inputted letters")))};var E=function(){var e={fontSize:window.innerWidth<=760?"100%":"200%"},t={fontSize:window.innerWidth<=760?"50%":"100%"};return l.a.createElement(l.a.Fragment,null,l.a.createElement(m,null,l.a.createElement(d,null,l.a.createElement("div",{className:"position-relative p-2 d-flex flex-column border-dark rounded",style:{backgroundColor:"#708090",width:"50%"}},l.a.createElement("h1",{style:e,className:"text-center mx-auto m-1"},"About"),l.a.createElement("p",{style:t},l.a.createElement("ul",null,l.a.createElement("li",null," I am Vietnamese American, fluent in both Vietnamese and English, familiar with Spanish and Japanese."),l.a.createElement("li",null," The coding language I use the most is C++ and C but I am familiar and comfortable with most other popular languages. "),l.a.createElement("li",null," This website is created using React, React Spring, and Bootstrap."),l.a.createElement("li",null,l.a.createElement("a",{href:"https://github.com/Soliloquyyy"}," Github ",l.a.createElement("br",null)," ")),l.a.createElement("li",null," Email/Contact: qudieu@gmail.com ")))))))},w=function(e){return l.a.createElement("div",{className:"position-relative p-2 d-flex flex-column border-dark rounded h1",style:{backgroundColor:"#708090",width:"55%"}},e.children)},b=function(e){return l.a.createElement("div",{className:"position-relative p-4 d-flex rounded align-self-center text-center justify-content-center",style:{backgroundColor:"#00008B",width:"50%"}},e.children)},y=function(e){return l.a.createElement("div",{className:"position-relative p-3 d-flex h4 font-weight-bold"},e.children)},v=function(e){return l.a.createElement("div",{className:"position-relative p-4 d-flex rounded h5 mx-auto"},e.children)};var k=function(){return l.a.createElement(m,null,l.a.createElement(d,null,l.a.createElement(w,null,l.a.createElement(b,null,"RGB Lightstrip Music Visualizer Without Using Stereo Mix"),l.a.createElement(y,null,"Introduction"),l.a.createElement(v,null,"This project aims to visualize sound loudness over a variety of frequency range without using Stereo Mix(more on this later) in real time. The goal is to send this live data through serial COM port to an Arduino or some micro-controller connected to an RGB strip(link on how to setup the Arduino) and visualize it there. The main problem with this is that most of the guides on the internet tells the user to use Stereo Mix on windows to achieve live audio recording. There is nothing wrong with this approach, however, when the user is using an external device to output there audio(such as a DAC or USB headphone) this approach proves useless since Stereo Mix cannot capture the sound being output to those devices. Stereo Mix relies on listening in the default audio hardware on the motherboard. So to overcome this issue we need to use WASAPI(Windows Audio Session API). This API can help us capture playback of audio with low latency audio playback and capture to any devices that Windows is outputing to. Using this API we can easily manipulate and read the audio data and send information from it to the micro-controller."),l.a.createElement(y,null,"Main"),l.a.createElement(v,null,"I am going to be using Python mainly for this project as there is a fork of a portaudio respository that helps with setting up WASAPI. C++ also works but I think for this project doing stuffs with arrays are far more convenient with Python. In the codes, the first 120 lines are just setting up audio and micro-controller devices and prompting the users to choose them, so I will just skip those steps. Now I will get into the audio processing part of this project."),l.a.createElement(v,null,"I first read the current data that is in a certain amount of frames ",l.a.createElement("br",null),"to find the peak magnitutde. In this case I read 256 frames the lower the more accurate at any certain time.",l.a.createElement("br",null),"Then unpack those data and put it into an nparray that is formanted.",l.a.createElement("br",null),l.a.createElement("div",null,"#get binary chunk data = stream.read(defaultframes) ",l.a.createElement("br",null),"#format binary chunk and put it in an np array",l.a.createElement("br",null),"rfint = struct.unpack(str(len(data)) + 'B', data)",l.a.createElement("br",null),"npdata = np.array(rfint, dtype=np.byte)",l.a.createElement("br",null))),l.a.createElement(v,null,"The data here is represented as 0 to 1 now that it is being formatted. Now I need to distinguish which frequency has the strongest peak. I need to find the position and the magnitude. So first I take the fft of npdata which would return a real and imaginary value and I can use the formula:",l.a.createElement("br",null),"mag == sqrt(real^2 + img^2) to find the magnitude.",l.a.createElement("br",null),"Then for frequency it is calculated in multiple of ",l.a.createElement("br",null),"(j)*DefaultSampleRate(sample rate of your playback device) divide by the data buffer size.",l.a.createElement("br",null),"Here for this project I want to send the peak of the bass value into the visualizer so if freq between 49 and 100 I would find the peak as i loop through j. Then i would encode this data and send to the micro-controller to visualize it. The value being return from the magnitude is within two bytes which is the same as rgb value that is going to be used by the micro-controller."),l.a.createElement(y,null,"Closing"),l.a.createElement(v,null,l.a.createElement("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/TcdnTDWDFbY",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0})),l.a.createElement(v,null,"Visit my github for code to this project"))))};var x=function(){return l.a.createElement(m,null,l.a.createElement(d,null,l.a.createElement(w,null,l.a.createElement(b,null,"ThoBot, A Multipurpose Discord Bot."),l.a.createElement(y,null,"Main"),l.a.createElement(v,null,"ThoBot is a Multipurpose Discord Bot that was originally designed for Discord community management. It originally has feature such as automated roles giving, reminders and minor chat enhancement. It has since evolved into becoming Multipurpose and includes features such as profile getter, chat games such as 2048 and connect four(chess is under consideration), YouTube API intergration such as querying for videos, osu! API integration such as tracking and getting beatmaps and automated reddit tracking system that post posts from any subreddits."),l.a.createElement(y,null,"Code and Demonstration"),l.a.createElement(v,null,"Code is posted on my github. Demonstration will be added soon."))))};var T=function(){return l.a.createElement(m,null,l.a.createElement(d,null,l.a.createElement(w,null,l.a.createElement(b,null,"Six degrees of Separation"),l.a.createElement(y,null,"Introduction"),l.a.createElement(v,null,'Implementation of a generalized "Six Degrees of Kevin Bacon". It is where we need to input two actors/actresses and have to find the shortest sequence of shared movies between them.'),l.a.createElement(y,null,"Main"),l.a.createElement(v,null,"We construct an actor graph and for each node we have its name, movies and year. Then we can connect two nodes if they have the same movies. the weight between two actor is determined with the lowest 1 + (2018 - year) since 2018 is the max year for this data set. Then with the graph done it is a simple implementation of Dijkstra algorithm."),l.a.createElement(y,null,"Closing"),l.a.createElement(v,null,"Email me for code. Demonstration will be posted soon."))))};var S=function(){return l.a.createElement(m,null,l.a.createElement(d,null,l.a.createElement(w,null,l.a.createElement(b,null,"2048 Game Remake in Java"),l.a.createElement(y,null,"Main"),l.a.createElement(v,null,"A remake of the famous 2048 game using Java. All functionality works and it has different features from the original such as being able to have any size nxn board and ends at any desirable score."),l.a.createElement(y,null,"Images"),l.a.createElement(v,null,l.a.createElement("img",{src:"https://soliloquy.s-ul.eu/wR4qufyu",class:"img-fluid mx-auto d-block",width:"50%"}),l.a.createElement("img",{src:"https://soliloquy.s-ul.eu/aTl7Zne2",class:"img-fluid mx-auto d-block",width:"50%"})),l.a.createElement(y,null,"Closing"),l.a.createElement(v,null,"Email me if you would like to see the code. I will post jar file here soon."))))};var I=function(){return l.a.createElement(m,null,l.a.createElement(d,null,l.a.createElement(w,null,l.a.createElement(b,null,"Document Generator and Autocomplete words"),l.a.createElement(y,null,"Introduction"),l.a.createElement(v,null,"For Document Generator, we use markov chain stochastic model to generate a document using a preexisting document. It predicts the next words based on probability from the input document and then generate a new one. For Autocomplete, we use a multiway trie to predicts the ending of any prefix inputed. We need an input list of words for the autocomplete prediction."),l.a.createElement(y,null,"Main"),l.a.createElement(v,null,"For document generator we keep track of the string and its next occurences strings(not in unique order). Then we can generate next word by just taking a random index from those next words and put it there. Otherwise we would put a period if there is no next words. Of course, we also need to parse in the original document. For Autocomplete, we build a Multiway Trie with children of the next completed words and its own occurence. We build MWT normally unless we find a duplicate we just increment its occurences. Then we can predict the top ten completion by searching through the trie and for each child in current node children we can find its top 10 autofill and push it to a vector and sort them all at the end and return the sorted top 10 most occured."),l.a.createElement(y,null,"Closing"),l.a.createElement(v,null,"Email me for code. Demonstration will be posted soon."))))};var C=function(){return l.a.createElement(m,null,l.a.createElement(d,null,l.a.createElement(w,null,l.a.createElement(b,null,"KD Tree implementation using BST"),l.a.createElement(y,null,"Introduction"),l.a.createElement(v,null,"We can construct a KD tree using a BST with C++ template. We can have a class called point, in which we can have n-dimensional data in it. We can then insert it into the BST while adding some helper functions for KD-Tree itself such as build and find nearest neighbor."),l.a.createElement(y,null,"Main"),l.a.createElement(v,null,'First we need to construct a BST with template. Which is fairly easy and self-explainatory. Then we create a new KDTree class that extend a BST with a "Point" class data type. Point can have coordinate data in how ever many dimension we want. For simplicity case this will deal with 2D. Then we can build the Tree using these steps: ',l.a.createElement("br",null),"Input: list of item, start, end, dimension",l.a.createElement("br",null),"* Output: root of subtree",l.a.createElement("br",null),"* BuildRecurse:",l.a.createElement("br",null),"*  Sort items from start to (end - 1) over dimension",l.a.createElement("br",null),"*  Select (leftmost) median for index mid",l.a.createElement("br",null),"*  Create node p using median",l.a.createElement("br",null),"*  p->left = BuildRecurse(list, start, mid, toggle_dim)",l.a.createElement("br",null),"*  p->right = BuildRecurse(list, mid+1, end, toggle_dim)",l.a.createElement("br",null),"*  return p",l.a.createElement("br",null),"We also need to implement find nearest neightbor. Which is just going down the tree checking the distance and finding the minimal. Here we use DFS with stack and toggle between x and y value to check the next point. and We would mark the lowest distanced one and return it."),l.a.createElement(y,null,"Closing"),l.a.createElement(v,null,"Demonstration will be posted soon. Email me if you would like to see the code."))))};var D=function(){return l.a.createElement(m,null,l.a.createElement(d,null,l.a.createElement(w,null,l.a.createElement(b,null,"Game of Life recreation in C and ARM."),l.a.createElement(y,null,"Introduction"),l.a.createElement(v,null,"This project is a recreation of the Game of Life with a mix of C and ARM assembly language as practice. Basically all the logics such as updating the board is written in ARM but all the interface is written in C. This is a simulation on command line."),l.a.createElement(y,null,"Main"),l.a.createElement(v,null,"This is simulation has the same rule set as John Conway's Game of Life: ",l.a.createElement("br",null),"Any live cell with fewer than two live neighbours dies, as if by underpopulation.",l.a.createElement("br",null),"Any live cell with two or three live neighbours lives on to the next generation.",l.a.createElement("br",null),"Any live cell with more than three live neighbours dies, as if by overpopulation.",l.a.createElement("br",null),"Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.",l.a.createElement("br",null)),l.a.createElement(y,null,"Closing"),l.a.createElement(v,null,"Demo: (to be added). Email me for the code."))))};var j=function(){return l.a.createElement(m,null,l.a.createElement(d,null,l.a.createElement(w,null,l.a.createElement(b,null,"Distributed Ray Tracing"),l.a.createElement(y,null,"Introduction"),l.a.createElement(v,null,"This is an implementation of distributed ray tracing with Bezier Patches using an existing CPU ray tracing project. In this project I will implement ray casting stochastic jitterring Anti-aliasing, Soft Shadows and Depth of Field. I will include the executable in the future."),l.a.createElement(y,null,"Anti-aliasing"),l.a.createElement(v,null,"It is implemented by jittered, stochastic super-sampling. Meaning, we cast a ray from the eye position into the scene for each pixels. We then would take the nearby subpixels(usually in an nxn box) and average them and use it as a result of the current pixel. Thus ultimately soften the edges and resulting in smoother edges."),l.a.createElement(y,null,"Soft Shadows"),l.a.createElement(v,null,"This is implemented by looping through every pixels and at every light source(not a single point meaning it is an area of light source). Then we pick a jittered, stochastic position on that light(same implementation as Anti-aliasing except not on subpixels levels). Then we cast a shadow feeler, a ray toward a light with displacement calculated from the stochastic position to see if it is obstructed. Then we would calculated the amount of light that hit the current pixel like normal. This will result in softer shadow as sometime the shadowfeeler would return false as it is being displaced to another position near the edge of the shadow. Noted that there is a more accurate way to implement soft shadow but it would take a significant more time since this is a cpu renderer."),l.a.createElement(y,null,"Depth of Field"),l.a.createElement(v,null,"Here we stochastically jittter the eyes(camera) position to simulate our cone of vision so that it is wider to create a sense of depth. With our eyes bigger we can cast ray to each pixel differently, and if the position is in focus every stochastic eyes position ray would return the same color value for all of the same distance. Otherwise it will look very random and out of focus."),l.a.createElement(y,null,"PDF with demonstrations"),l.a.createElement(v,null,l.a.createElement("a",{href:"https://soliloquy.s-ul.eu/UQhDqQ1L",target:"_blank"}," https://soliloquy.s-ul.eu/UQhDqQ1L ")),l.a.createElement(y,null,"Code and EXE"),l.a.createElement(v,null,"Please email me for the code and EXE to be posted soon."))))};var A=function(){return l.a.createElement(m,null,l.a.createElement(d,null,l.a.createElement(w,null,l.a.createElement(b,null,"Shader Program Projects"),l.a.createElement(y,null,"Introduction"),l.a.createElement(v,null,"This section consists of 4 projects that deals with Shader Programming. They consists of: ",l.a.createElement("br",null),"Water Wave Shader",l.a.createElement("br",null),"Dithering with Fragment Shader",l.a.createElement("br",null),"Mesh Generation with Geometry Shader",l.a.createElement("br",null),"Post-Processing Shader",l.a.createElement("br",null)),l.a.createElement(y,null,"Main"),l.a.createElement(v,null,"Water Wave Shader: ",l.a.createElement("br",null),"This shader generate water waves using the formula ",l.a.createElement("br",null),"height = amp * cos( 2*pi*( d / lambda \u2013 freq*t ) ). ",l.a.createElement("br",null),"and a flat floor mesh that is passed in from a different program. This also calculates the normal vector so we can have good lighting for the fragment shader calculations. This project allows for more than one wave to be generated thus can result in realistic random-looking waves."),l.a.createElement(v,null,l.a.createElement("img",{src:"https://soliloquy.s-ul.eu/UalxdW0m",class:"img-fluid mx-auto d-block",width:"50%"})),l.a.createElement(v,null,"Dithering with Fragment Shader",l.a.createElement("br",null),"Explaination of Dithering: https://en.wikipedia.org/wiki/Dither",l.a.createElement("br",null),"In this project I will be: ",l.a.createElement("br",null),"Dithering to k discretization levels, controlled by up/down arrows. Dithering in grayscale mode or independently dithering each color component. Using random dithering to set color probabilistically",l.a.createElement("br",null)),l.a.createElement(v,null,"Mesh Generation with Geometry Shader",l.a.createElement("br",null),"In this shader program I generated scalable bumps floor mesh from a flat floor mesh. The geometry shader raised part of the floor to demonstrate the use of geometry shader. With the geometry of the original mesh change the normal map need to also be changed to calculate the right lighting levels for the generated mesh so that will also be calculated too.",l.a.createElement("br",null),"https://soliloquy.s-ul.eu/9RKj1ETS"),l.a.createElement("div",{className:"position-relative p-4 d-flex rounded h5"},"Post-Processing Shader",l.a.createElement("br",null),"Here is a detailed PDF explaining this project: ",l.a.createElement("br",null)),l.a.createElement("a",{href:"https://soliloquy.s-ul.eu/pso3qC29",className:"position-relative p-4 d-flex rounded h3"},"https://soliloquy.s-ul.eu/pso3qC29"))))};var W=function(){var e=Object(u.f)(),t=Object(o.c)(e,(function(e){return e.pathname}),{from:{opacity:0,transform:"translate(100%, 0%)"},enter:{opacity:1,transform:"translate(0%, 0%)"},leave:{opacity:0,transform:"translate(-50%, 0%)"}});return l.a.createElement(l.a.Fragment,null,l.a.createElement(c,null),l.a.createElement("main",{className:"container-fluid"},t.map((function(e){var t=e.item,a=e.props,n=e.key;return l.a.createElement(o.a.div,{key:n,style:a,className:"position-relative"},l.a.createElement(u.c,{location:t},l.a.createElement(u.a,{exact:!0,path:"/",component:p}),l.a.createElement(u.a,{exact:!0,path:"/computer",component:g}),l.a.createElement(u.a,{exact:!0,path:"/photography",component:f}),l.a.createElement(u.a,{exact:!0,path:"/about",component:E}),l.a.createElement(u.a,{exact:!0,path:"/computer/1",component:k}),l.a.createElement(u.a,{exact:!0,path:"/computer/2",component:j}),l.a.createElement(u.a,{exact:!0,path:"/computer/3",component:A}),l.a.createElement(u.a,{exact:!0,path:"/computer/4",component:x}),l.a.createElement(u.a,{exact:!0,path:"/computer/5",component:S}),l.a.createElement(u.a,{exact:!0,path:"/computer/6",component:C}),l.a.createElement(u.a,{exact:!0,path:"/computer/7",component:D}),l.a.createElement(u.a,{exact:!0,path:"/computer/8",component:T}),l.a.createElement(u.a,{exact:!0,path:"/computer/9",component:I})))}))))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));a(32);function P(){var e=Object(u.f)().pathname;return Object(n.useEffect)((function(){window.scrollTo(0,0)}),[e]),null}i.a.render(l.a.createElement(s.a,{basename:"/"},l.a.createElement(P,null),l.a.createElement(W,null)),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))}},[[17,1,2]]]);
//# sourceMappingURL=main.d0911398.chunk.js.map
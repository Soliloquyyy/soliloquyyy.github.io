{"version":3,"sources":["logo.svg","topBar/topBar.js","Pages/AbsoluteWrapper.js","Pages/ListWrapper.js","Pages/TitleWrapper.js","Pages/home.js","Pages/photography.js","Pages/computer.js","Pages/about.js","Pages/ContentWrapper.js","Pages/TitleHeaderWrapper.js","Pages/HeaderWrapper.js","Pages/BodyWrapper.js","SubPages/rgbSub.js","SubPages/thoSub.js","SubPages/actorSub.js","SubPages/boardSub.js","SubPages/docGenNAutoCompleteSub.js","SubPages/kdSub.js","SubPages/lifeSub.js","SubPages/raySub.js","SubPages/shaderSub.js","App.js","serviceWorker.js","Pages/ScrollToTop.js","index.js"],"names":["module","exports","TopBar","useSpring","opacity","marginTop","config","delay","duration","from","barSty","height","fontSize","window","innerWidth","backgroundColor","ul","className","style","exact","to","activeClassName","AbsoluteWrapper","children","color","width","ListWrapper","props","class","margin","TitleWrapper","widthBool","titleStyle","desStyle","flexboxStyle","link","Home","sty","sty2","Photography","Computer","About","href","ContentWrapper","TitleHeaderWrapper","HeaderWrapper","BodyWrapper","rgbSub","src","frameborder","allow","allowfullscreen","thoSub","actorSub","boardSub","dNcSub","kdSub","liveSub","raySub","target","shaderSub","App","location","useLocation","transitions","useTransition","pathname","transform","enter","leave","map","item","key","div","path","component","lifeSub","Boolean","hostname","match","ScrollToTop","useEffect","scrollTo","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3cb5e523.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\n//import css;\nimport './topBar.css';\n\n//import reactspring\nimport { useSpring, animated } from 'react-spring';\n\n//import NavLink for router\nimport { NavLink } from 'react-router-dom';\n\n\nfunction TopBar() {\n    //spring\n    const topBarAni = useSpring({\n        opacity: .5,\n        marginTop: 0,\n        config: {\n            delay: 1000,\n            duration: 1200,\n        },\n        from: {\n            opacity: 0,\n            marginTop: -25\n        },\n    });\n    const fSize = window.innerWidth <= 760 ? \"50%\" : \"150%\";\n    const barSty = {\n        height: \"3rem\",\n        fontSize: fSize,\n        marginTop: \"1rem\",\n        backgroundColor: '#282c34',\n    };\n\n    return (\n        <animated.ul className=\"nav justify-content-center position-relative\" style={barSty}>\n  \t\t\t<li>\n                <NavLink exact to=\"/\" className=\"nav-item nav-link d-inline-block\" activeClassName= \"nav-item nav-link active d-inline-block\">Home</NavLink>\n                <NavLink exact to=\"/computer\" className=\"nav-item nav-link d-inline-block\" activeClassName= \"nav-item nav-link active d-inline-block\">Computer</NavLink>\n                <NavLink exact to=\"/photography\" className=\"nav-item nav-link d-inline-block\" activeClassName= \"nav-item nav-link active d-inline-block\">Photography</NavLink>\n                <NavLink exact to=\"/about\" className=\"nav-item nav-link d-inline-block\" activeClassName= \"nav-item nav-link active d-inline-block\">About</NavLink>\n            </li>\n  \t\t</animated.ul>\n    );\n};\n\nexport default TopBar;\n\n/*                <a href=\"/\"> Home </a>\n                <a href=\"/photography\">Photography</a>\n                <a href=\"/computer\">Computer</a>\n                <a href=\"/about\">About</a>*/","import React from \"react\";\n\n\n\nconst AbsoluteWrapper = ({ children }) => {\n\tconst backgroundStyle = {\n        backgroundColor: \"#282c34\",\n        color: 'white',\n        width: '100%',\n        height: '100%',\n\t};\n  return (\n  \t\t\t<div className=\"position-absolute \" style={backgroundStyle}>\n  \t\t\t\t{children}\n  \t\t\t</div>\n  \t);\n};\n\nexport default AbsoluteWrapper;\n","import React, { Component } from \"react\";\n\nconst ListWrapper = props => {\n\tconst style = {\n\t\tmargin: '1rem',\n\t}\n\treturn (\n\t\t<div class = \"position-relative d-flex flex-column border-dark justify-content-around\">\n\t\t\t<div class = \"position-relative p-2 d-flex flex-row justify-content-center\" style={style}> \n\t\t\t\t{props.children} \n\t\t\t</div>\n\t\t</div>\n\t)\n};\n\nexport default ListWrapper;\n","import React, { Component } from \"react\";\nimport { NavLink } from 'react-router-dom';\n\nconst TitleWrapper =  props  => {\n\tlet widthBool = window.innerWidth <= 760 ? true : false\n\tconst fSize = widthBool  ? \"120%\" : \"200%\";\n\tconst fSize2 = widthBool  ? \"70%\" : \"100%\";\n\tconst boxSize = widthBool ? \"90%\" : \"80%\";\n\tconst titleStyle = {\n\t\tfontSize: fSize,\n\t};\n\tconst desStyle = {\n\t\tfontSize: fSize2,\n\t};\n\tconst flexboxStyle = {\n\t\tbackgroundColor: \"#708090\",\n\t\twidth: boxSize,\n\t};\n\n\treturn (\n\t\t<div className= \"position-relative p-2 d-flex flex-column border-dark rounded\" style = {flexboxStyle}> \n\t\t\t<h1 style={titleStyle}> \n\t\t\t\t<NavLink exact to={props.link} >\n\t\t\t\t\t{props.children[0]}\n\t\t\t\t</NavLink>\n\t\t\t\t\n\t\t\t</h1>\n\t\t\t<p style={desStyle}> \n\t\t\t\t{props.children[1]}\n\t\t\t</p>\n\t\t</div>\n\n\n\n\t)\n};\n\nexport default TitleWrapper;\n","import React from 'react';\n//import css;\nimport './home.css';\nimport AbsoluteWrapper from \"./AbsoluteWrapper\";\nimport ImageNavWrapper from \"./ImageNavWrapper\";\nimport ListWrapper from \"./ListWrapper\";\nimport TitleWrapper from \"./TitleWrapper\";\n\n//import reactspring\nimport { useSpring, animated } from 'react-spring';\n\nfunction Home() {\n\tconst flexboxStyle = {\n\t\tbackgroundColor: \"#708090\",\n\t\twidth: \"50%\",\n\t};\n\tconst fSize = (window.innerWidth <= 760) ? \"100%\" : \"200%\"\n\tconst sty  = {\n\t\tfontSize: fSize,\n\t}\n\tconst fSize2 = window.innerWidth <= 760 ? \"50%\" : \"100%\";\n\tconst sty2 = {\n\t\tfontSize: fSize2,\n\t}\n    return (\n    \t<>\n    \t<AbsoluteWrapper>\n\t\t\t\t<ListWrapper>\n\t\t\t\t\t<div className= \"position-relative p-2 d-flex flex-column border-dark rounded\" style = {flexboxStyle}> \n\t\t\t\t\t\t<h1 style = {sty} className=\"text-center mx-auto m-1\">\n\t\t\t\t\t\t\tWelcome to my page\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<p style = {sty2}>\n\t\t\t\t\t\t\tHello, my name is Quy. I am a graduate from UCSD that majored in Mathematics and Computer Science.\n\t\t\t\t\t\t\tI love developing software that help me learn a particular subject. You might see many different projects that\n\t\t\t\t\t\t\tcater to different subjects in computer science here.  Please checkout my porfolio using the navigation bar.<br/>\n\t\t\t\t\t\t\tI also love photography and do amature photography in my free times. I will slowly upload my porfolio for it here soon.<br/>\n\t\t\t\t\t\t\tPS: I am still updating this website regularly.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</ListWrapper>\n\t\t\t\t\n\n\t\t</AbsoluteWrapper>\n\t\t</>\n    );\n};\n\nexport default Home;","import React from 'react';\nimport AbsoluteWrapper from \"./AbsoluteWrapper\";\nimport ImageNavWrapper from \"./ImageNavWrapper\";\nimport ListWrapper from \"./ListWrapper\";\nimport TitleWrapper from \"./TitleWrapper\";\n\nfunction Photography() {\n\tconst flexboxStyle = {\n\t\tbackgroundColor: \"#708090\",\n\t\twidth: \"50%\",\n\t};\n\tconst fSize = (window.innerWidth <= 760) ? \"100%\" : \"200%\"\n\tconst sty  = {\n\t\tfontSize: fSize,\n\t}\n\tconst fSize2 = window.innerWidth <= 760 ? \"50%\" : \"100%\";\n\tconst sty2 = {\n\t\tfontSize: fSize2,\n\t}\n\n    return (\n    \t<AbsoluteWrapper>\n\t\t\t<ListWrapper>\n\t\t\t\t\t<div className= \"position-relative p-2 d-flex flex-column border-dark rounded\" style = {flexboxStyle}> \n\t\t\t\t\t\t<h1 style = {sty} className=\"text-center mx-auto m-1\">\n\t\t\t\t\t\t\tUnder Construction\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t</div>\n\t\t\t\t</ListWrapper>\n\t\t</AbsoluteWrapper>\n    );\n};\n\nexport default Photography;","import React from 'react';\nimport AbsoluteWrapper from \"./AbsoluteWrapper\";\nimport TitleWrapper from \"./TitleWrapper\";\nimport ImageNavWrapper from \"./ImageNavWrapper\";\nimport ListWrapper from \"./ListWrapper\";\n\n//import reactspring and navlink\nimport { useSpring, animated } from 'react-spring';\nimport { NavLink } from 'react-router-dom';\n\n\nfunction Computer() {\n\tconst flexboxStyle = {\n\t\tbackgroundColor: \"#708090\",\n\t};\n\tconst link1 = \"computer/1\";\n\tconst link2 = \"computer/2\";\n\tconst link3 = \"computer/3\";\n\tconst link4 = \"computer/4\";\n\tconst link5 = \"computer/5\";\n\tconst link6 = \"computer/6\";\n\tconst link7 = \"computer/7\";\n\tconst link8 = \"computer/8\";\n\tconst link9 = \"computer/9\";\n\tconst des1 = \"A music visualizer that uses any addressable rgb strip and a micro controler such as the arduino.This project aims to process audio signal without having to use Stereo Mix(More info on why inside).It uses WASPAI to capture playback audio to process with FFT.\";\n\tconst des2 = \"Implementation of Distributed Ray Tracing on an existing CPU ray tracing project and creation of Bezier Patches. Utilized OpenGL, KDTree Bounding boxes, Bezier Patches, Ray Tracing\";\n\tconst des3 = \"Various Shader Project that aims to show shader mastery. Includes: Post-Processing Shader, Fragment Water Wave Shader, Geometry Shader, and many more. Used OpenGL.\";\n\tconst des4 = \"A Multipurpose Bot to help manage Discord Community and also to bring entertainment for the users. Include feature such as automatic role assignment upon joining, Youtube API search calls, Reddit Post Tracker, Playable Chat Games and many more\";\n\tconst des5 = \"A replica of the game '2048'. Implemented in JavaFX. The project aims to showcase Java familiarity but also GUI skills. This also include feature to end game at any score as oppose to the original 2048\";\n\tconst des6 = \"An full implementation of a KDTree with BST using C++ template. It is implemented as 2DTree but since it is using C++ template it can easily be modify to work with any dimension by passing in the comparision function\";\n\tconst des7 = \"Implementation of Game of Life in ARM as the logic and C as the interface to user. This project aims to improve my understanding of ARM and Assembly languages and how they work behind the hood\";\n\tconst des8 = \"A more generalized version of Six Degree of Kevin Bacon. This version aims to find ind the shortest sequence of shared movies between two actors from a given list. Utilized: Graph, Pathfinding\";\n\tconst des9 = \"A probabilistic document generator that takes input of an existing text and generate a document based on the probablity of any words that goes after it. The Autocomplete part is a simple implementation of a Multi-Way Trie that predict the ending of the inputted letters\";\n\n\n    return (\n    \t<AbsoluteWrapper>\n\t\t\t\t<ListWrapper>\n\t\t\t\t{/*\n\t\t\t\t\t<ImageNavWrapper link={link1}> \n\t\t\t\t\t\tImage\n\t\t\t\t\t</ImageNavWrapper> \n\t\t\t\t\t*/\n\t\t\t\t}\n\t\t\t\t\t<TitleWrapper link={link1}>\n\t\t\t\t\t\tRGB Lightstrip Music Visualizer Without Using Stereo Mix\n\t\t\t\t\t\t{des1}\n\t\t\t\t\t</TitleWrapper>\n\t\t\t\t</ListWrapper>\n\t\t\t\t\n\n\t\t\t\t<ListWrapper>\n\n\t\t\t\t\t<TitleWrapper link={link2}>\n\t\t\t\t\t\tDistributed Ray Tracing\n\t\t\t\t\t\t{des2}\n\t\t\t\t\t</TitleWrapper>\n\t\t\t\t</ListWrapper>\n\n\n\t\t\t\t<ListWrapper>\n\n\t\t\t\t\t<TitleWrapper link={link3}>\n\t\t\t\t\t\tShader Program Projects\n\t\t\t\t\t\t{des3}\n\t\t\t\t\t</TitleWrapper>\n\t\t\t\t</ListWrapper>\n\n\n\t\t\t\t<ListWrapper>\n\n\t\t\t\t\t<TitleWrapper link={link4}>\n\t\t\t\t\t\tThoBot: Multipurpose Discord Bot \n\t\t\t\t\t\t{des4}\n\t\t\t\t\t</TitleWrapper>\n\t\t\t\t</ListWrapper>\n\n\t\t\t\t<ListWrapper>\n\n\t\t\t\t\t<TitleWrapper link={link5}>\n\t\t\t\t\t\t2048 Remake with JavaFX\n\t\t\t\t\t\t{des5}\n\t\t\t\t\t</TitleWrapper>\n\t\t\t\t</ListWrapper>\n\n\t\t\t\t<ListWrapper>\n\n\t\t\t\t\t<TitleWrapper link={link6}>\n\t\t\t\t\t\tKDTree(2D) implementation Using BST and C++ Template\n\t\t\t\t\t\t{des6}\n\t\t\t\t\t</TitleWrapper>\n\t\t\t\t</ListWrapper>\n\n\t\t\t\t<ListWrapper>\n\n\t\t\t\t\t<TitleWrapper link={link7}>\n\t\t\t\t\t\tGame of Life simulation on Command Lines using ARM and C\n\t\t\t\t\t\t{des7}\n\t\t\t\t\t</TitleWrapper>\n\t\t\t\t</ListWrapper>\n\n\t\t\t\t<ListWrapper>\n\n\t\t\t\t\t<TitleWrapper link={link8}>\n\t\t\t\t\t\tSix Degree of Separation Finder\n\t\t\t\t\t\t{des8}\n\t\t\t\t\t</TitleWrapper>\n\t\t\t\t</ListWrapper>\n\n\t\t\t\t<ListWrapper>\n\n\t\t\t\t\t<TitleWrapper link={link9}>\n\t\t\t\t\t\tDocument Generator and Autocomplete words\n\t\t\t\t\t\t{des9}\n\t\t\t\t\t</TitleWrapper>\n\t\t\t\t</ListWrapper>\n\n\t\t</AbsoluteWrapper>\n    );\n};\n\nexport default Computer;","import React from 'react';\n//import css;\nimport AbsoluteWrapper from \"./AbsoluteWrapper\";\nimport ImageNavWrapper from \"./ImageNavWrapper\";\nimport ListWrapper from \"./ListWrapper\";\nimport TitleWrapper from \"./TitleWrapper\";\n\nfunction About(){\n\tconst flexboxStyle = {\n\t\tbackgroundColor: \"#708090\",\n\t\twidth: \"50%\",\n\t};\n\tconst fSize = (window.innerWidth <= 760) ? \"100%\" : \"200%\"\n\tconst sty  = {\n\t\tfontSize: fSize,\n\t}\n\tconst fSize2 = window.innerWidth <= 760 ? \"50%\" : \"100%\";\n\tconst sty2 = {\n\t\tfontSize: fSize2,\n\t}\n\treturn (\n\t    \t<>\n\t    \t<AbsoluteWrapper>\n\t\t\t\t\t<ListWrapper>\n\t\t\t\t\t\t<div className= \"position-relative p-2 d-flex flex-column border-dark rounded\" style = {flexboxStyle}> \n\t\t\t\t\t\t\t<h1 style = {sty} className=\"text-center mx-auto m-1\">\n\t\t\t\t\t\t\t\tAbout\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t<p style = {sty2}>\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t<li> I am Vietnamese American, fluent in both Vietnamese and English, familiar with Spanish and Japanese.</li>\n\t\t\t\t\t\t\t\t\t<li> The coding language I use the most is C++ and C but I am familiar and comfortable with most other popular languages. </li>\n\t\t\t\t\t\t\t\t\t<li> This website is created using React, React Spring, and Bootstrap.</li>\n\t\t\t\t\t\t\t\t\t<li><a href=\"https://github.com/Soliloquyyy\"> Github <br/> </a></li>\n\t\t\t\t\t\t\t\t\t<li> Email/Contact: qudieu@gmail.com </li>\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</ListWrapper>\n\t\t\t\t\t\n\n\t\t\t</AbsoluteWrapper>\n\t\t\t</>\n\t    );\n}\n\nexport default About;","import React, { Component } from \"react\";\nimport { NavLink } from 'react-router-dom';\n\nconst ContentWrapper = props => {\n\t\tconst flexboxStyle = {\n\t\t\tbackgroundColor: \"#708090\",\n\t\t\twidth: \"55%\",\n\t\t};\n\n\t\treturn (\n\t\t\t<div className= \"position-relative p-2 d-flex flex-column border-dark rounded h1\" style = {flexboxStyle}> \n\t\t\t\t{props.children}\n\t\t\t</div>\n\n\n\t\t);\n};\n\nexport default ContentWrapper;","import React, { Component } from \"react\";\nimport { NavLink } from 'react-router-dom';\n\nconst TitleHeaderWrapper = props => {\n\t\tconst flexboxStyle = {\n\t\t\tbackgroundColor: \"#00008B\",\n\t\t\twidth: \"50%\",\n\t\t};\n\n\t\treturn (\n\t\t\t<div className= \"position-relative p-4 d-flex rounded align-self-center text-center justify-content-center\" style = {flexboxStyle}> \n\t\t\t\t\t{props.children}\n\t\t\t</div>\n\n\n\t\t);\n};\n\nexport default TitleHeaderWrapper;","import React, { Component } from \"react\";\nimport { NavLink } from 'react-router-dom';\n\nconst HeaderWrapper = props => {\n\treturn (\n\t\t<div className= \"position-relative p-3 d-flex h4 font-weight-bold\"> \n\t\t\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default HeaderWrapper;","import React, { Component } from \"react\";\nimport { NavLink } from 'react-router-dom';\n\nconst BodyWrapper = props => {\n\treturn (\n\t\t<div className= \"position-relative p-4 d-flex rounded h5 mx-auto\"> \n\t\t\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default BodyWrapper;","import React from 'react';\nimport AbsoluteWrapper from '../Pages/AbsoluteWrapper';\nimport ListWrapper from '../Pages/ListWrapper';\nimport ContentWrapper from '../Pages/ContentWrapper';\nimport TitleHeaderWrapper from \"../Pages/TitleHeaderWrapper\";\nimport HeaderWrapper from \"../Pages/HeaderWrapper\";\nimport BodyWrapper from \"../Pages/BodyWrapper\";\n\n//import reactspring and navlink\nimport { useSpring, animated } from 'react-spring';\nimport { NavLink } from 'react-router-dom';\n\n\n\nfunction rgbSub(){\n\treturn (\n\t\t<AbsoluteWrapper>\n\t\t\t<ListWrapper>\n\t\t\t\t<ContentWrapper>\n\t\t\t\t\t<TitleHeaderWrapper>\t\n\t\t\t\t\t\tRGB Lightstrip Music Visualizer Without Using Stereo Mix\n\t\t\t\t\t</TitleHeaderWrapper>\n\t\t\t\t\t<HeaderWrapper>\n\t\t\t\t\t\tIntroduction\n\t\t\t\t\t</HeaderWrapper>\n\t\t\t\t\t<BodyWrapper>\n\t\t\t\t\t\tThis project aims to visualize sound loudness over a variety of frequency range without using Stereo Mix(more on this later) in real time.\n\t\t\t\t\t\tThe goal is to send this live data through serial COM port to an Arduino or some micro-controller connected to an RGB strip(link on how to setup the Arduino) and visualize it there.\n\t\t\t\t\t\tThe main problem with this is that most of the guides on the internet tells the user to use Stereo Mix on windows to achieve live audio recording.\n\t\t\t\t\t\tThere is nothing wrong with this approach, however, when the user is using an external device to output there audio(such as a DAC or USB headphone) this approach proves useless since Stereo Mix cannot capture the sound being output to those devices.\n\t\t\t\t\t\tStereo Mix relies on listening in the default audio hardware on the motherboard. So to overcome this issue we need to use WASAPI(Windows Audio Session API).\n\t\t\t\t\t\tThis API can help us capture playback of audio with low latency audio playback and capture to any devices that Windows is outputing to.\n\t\t\t\t\t\tUsing this API we can easily manipulate and read the audio data and send information from it to the micro-controller.\n\t\t\t\t\t</BodyWrapper>\n\t\t\t\t\t<HeaderWrapper>\n\t\t\t\t\t\tMain\n\t\t\t\t\t</HeaderWrapper>\n\t\t\t\t\t<BodyWrapper>\n\t\t\t\t\t\tI am going to be using Python mainly for this project as there is a fork of a portaudio respository that helps with setting up WASAPI.\n\t\t\t\t\t\tC++ also works but I think for this project doing stuffs with arrays are far more convenient with Python. \n\t\t\t\t\t\tIn the codes, the first 120 lines are just setting up audio and micro-controller devices and prompting the users to choose them, so I will just skip those steps.\n\t\t\t\t\t\tNow I will get into the audio processing part of this project.\n\t\t\t\t\t</BodyWrapper>\n\t\t\t\t\t<BodyWrapper>\n\t\t\t\t\t\tI first read the current data that is in a certain amount of frames <br/>to find the peak magnitutde. \n\t\t\t\t\t\tIn this case I read 256 frames the lower the more accurate at any certain time.<br/>\n\t\t\t\t\t\tThen unpack those data and put it into an nparray that is formanted.<br/>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t#get binary chunk\n    \t\t\t\t\t\t\tdata = stream.read(defaultframes) <br/>\n    \t\t\t\t\t\t\t#format binary chunk and put it in an np array<br/>\n    \t\t\t\t\t\t\trfint = struct.unpack(str(len(data)) + 'B', data)<br/>\n    \t\t\t\t\t\t\tnpdata = np.array(rfint, dtype=np.byte)<br/>\n    \t\t\t\t\t\t\t</div>\n\t\t\t\t\t</BodyWrapper>\n\t\t\t\t\t<BodyWrapper>\n\t\t\t\t\t\t\tThe data here is represented as 0 to 1 now that it is being formatted. \n\t\t\t\t\t\t\tNow I need to distinguish which frequency has the strongest peak. I need to find the position and the magnitude.\n\t\t\t\t\t\t\tSo first I take the fft of npdata which would return a real and imaginary value and I can use the formula:<br/>\n\t\t\t\t\t\t\tmag == sqrt(real^2 + img^2) to find the magnitude.<br/>\n\t\t\t\t\t\t\tThen for frequency it is calculated in multiple of <br/>(j)*DefaultSampleRate(sample rate of your playback device) divide by the data buffer size.<br/>\n\t\t\t\t\t\t\tHere for this project I want to send the peak of the bass value into the visualizer so if freq between 49 and 100 I would find the peak as i loop through j.\n\t\t\t\t\t\t\tThen i would encode this data and send to the micro-controller to visualize it. The value being return from the magnitude is within two bytes which is the same as rgb value that is going to be used by the micro-controller.\n\t\t\t\t\t</BodyWrapper>\n\t\t\t\t\t<HeaderWrapper>\n\t\t\t\t\t\t\tClosing\n\t\t\t\t\t</HeaderWrapper>\n\t\t\t\t\t<BodyWrapper>\n\t\t\t\t\t\t<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/TcdnTDWDFbY\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\t\t\t\t\t</BodyWrapper>\n\t\t\t\t\t<BodyWrapper>\n\t\t\t\t\t\tVisit my github for code to this project\n\t\t\t\t\t</BodyWrapper>\n\t\t\t\t</ContentWrapper>\n\t\t\t</ListWrapper>\n\t\t</AbsoluteWrapper>\n\n\n\n\n\n\n\n\n\t)\n};\n\nexport default rgbSub;","import React from 'react';\r\nimport AbsoluteWrapper from '../Pages/AbsoluteWrapper';\r\nimport ListWrapper from '../Pages/ListWrapper';\r\nimport ContentWrapper from '../Pages/ContentWrapper';\r\nimport TitleHeaderWrapper from \"../Pages/TitleHeaderWrapper\";\r\nimport HeaderWrapper from \"../Pages/HeaderWrapper\";\r\nimport BodyWrapper from \"../Pages/BodyWrapper\";\r\n\r\n//import reactspring and navlink\r\nimport { useSpring, animated } from 'react-spring';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction thoSub(){\r\n\treturn(\r\n\t\t<AbsoluteWrapper>\r\n\t\t\t<ListWrapper>\r\n\t\t\t\t<ContentWrapper>\r\n\t\t\t\t\t<TitleHeaderWrapper>\r\n\t\t\t\t\t\tThoBot, A Multipurpose Discord Bot.\r\n\t\t\t\t\t</TitleHeaderWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tRemake\r\n\t\t\t\t\t</HeaderWrapper>\t\r\n\t\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\t\tI have recently remade the bot from scratch with better implementation on dynamic commands and better\r\n\t\t\t\t\t\t\tdata storage reddit tracker using mariaDB. \r\n\t\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tMain\r\n\t\t\t\t\t</HeaderWrapper>\t\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tThoBot is a Multipurpose Discord Bot that was originally designed for Discord community management.\r\n\t\t\t\t\t\tIt originally has feature such as automated roles giving, reminders and minor chat enhancement. It has since evolved into becoming Multipurpose and includes features such as\r\n\t\t\t\t\t\tprofile getter, chat games such as 2048 and connect four(chess is under consideration), YouTube API intergration such as querying for videos, osu! API integration such as tracking and getting beatmaps\r\n\t\t\t\t\t\tand automated reddit tracking system that post posts from any subreddits.\t\t\t\t\t\t\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tCode and Demonstration\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tCode is posted on my github. Demonstration will be added soon.\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t</ContentWrapper>\r\n\t\t\t</ListWrapper>\r\n\t\t</AbsoluteWrapper>\r\n\t)\r\n};\r\n\r\nexport default thoSub;","import React from 'react';\r\nimport AbsoluteWrapper from '../Pages/AbsoluteWrapper';\r\nimport ListWrapper from '../Pages/ListWrapper';\r\nimport ContentWrapper from '../Pages/ContentWrapper';\r\nimport TitleHeaderWrapper from \"../Pages/TitleHeaderWrapper\";\r\nimport HeaderWrapper from \"../Pages/HeaderWrapper\";\r\nimport BodyWrapper from \"../Pages/BodyWrapper\";\r\n\r\n//import reactspring and navlink\r\nimport { useSpring, animated } from 'react-spring';\r\nimport { NavLink } from 'react-router-dom';\r\nfunction actorSub(){\r\n\treturn (\r\n\t\t<AbsoluteWrapper>\r\n\t\t\t<ListWrapper>\r\n\t\t\t\t<ContentWrapper>\r\n\t\t\t\t\t<TitleHeaderWrapper>\r\n\t\t\t\t\t\tSix degrees of Separation\r\n\t\t\t\t\t</TitleHeaderWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tIntroduction\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tImplementation of a generalized \"Six Degrees of Kevin Bacon\". It is where we need to input two\r\n\t\t\t\t\t\tactors/actresses and have to find the shortest sequence of shared movies between them. \r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tMain\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tWe construct an actor graph and for each node we have its name, movies and year. Then we can connect two nodes\r\n\t\t\t\t\t\tif they have the same movies. the weight between two actor is determined with the lowest 1 + (2018 - year) since \r\n\t\t\t\t\t\t2018 is the max year for this data set. Then with the graph done it is a simple implementation of Dijkstra algorithm.\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tClosing\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tEmail me for code. Demonstration will be posted soon.\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t</ContentWrapper>\r\n\t\t\t</ListWrapper>\r\n\t\t</AbsoluteWrapper>\r\n\t)\r\n}\r\n\r\nexport default actorSub;","import React from 'react';\r\nimport AbsoluteWrapper from '../Pages/AbsoluteWrapper';\r\nimport ListWrapper from '../Pages/ListWrapper';\r\nimport ContentWrapper from '../Pages/ContentWrapper';\r\nimport TitleHeaderWrapper from \"../Pages/TitleHeaderWrapper\";\r\nimport HeaderWrapper from \"../Pages/HeaderWrapper\";\r\nimport BodyWrapper from \"../Pages/BodyWrapper\";\r\n\r\n//import reactspring and navlink\r\nimport { useSpring, animated } from 'react-spring';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction boardSub(){\r\n\treturn(\r\n\t\t<AbsoluteWrapper>\r\n\t\t\t<ListWrapper>\r\n\t\t\t\t<ContentWrapper>\r\n\t\t\t\t\t<TitleHeaderWrapper>\r\n\t\t\t\t\t\t2048 Game Remake in Java\r\n\t\t\t\t\t</TitleHeaderWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tMain\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tA remake of the famous 2048 game using Java. All functionality works and it has different features from the original such as\r\n\t\t\t\t\t\tbeing able to have any size nxn board and ends at any desirable score.\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tImages\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\t<img src = \"https://soliloquy.s-ul.eu/wR4qufyu\" class=\"img-fluid mx-auto d-block\" width=\"50%\"></img>\r\n\t\t\t\t\t\t<img src = \"https://soliloquy.s-ul.eu/aTl7Zne2\" class=\"img-fluid mx-auto d-block\" width=\"50%\"></img>\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tClosing\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tEmail me if you would like to see the code. I will post jar file here soon.\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t</ContentWrapper>\r\n\t\t\t</ListWrapper>\r\n\t\t</AbsoluteWrapper>\r\n\t)\r\n};\r\n\r\nexport default boardSub;\r\n","import React from 'react';\r\nimport AbsoluteWrapper from '../Pages/AbsoluteWrapper';\r\nimport ListWrapper from '../Pages/ListWrapper';\r\nimport ContentWrapper from '../Pages/ContentWrapper';\r\nimport TitleHeaderWrapper from \"../Pages/TitleHeaderWrapper\";\r\nimport HeaderWrapper from \"../Pages/HeaderWrapper\";\r\nimport BodyWrapper from \"../Pages/BodyWrapper\";\r\n\r\n//import reactspring and navlink\r\nimport { useSpring, animated } from 'react-spring';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction dNcSub(){\r\n\treturn (\r\n\t\t<AbsoluteWrapper>\r\n\t\t\t<ListWrapper>\r\n\t\t\t\t<ContentWrapper>\r\n\t\t\t\t\t<TitleHeaderWrapper>\r\n\t\t\t\t\t\tDocument Generator and Autocomplete words\r\n\t\t\t\t\t</TitleHeaderWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tIntroduction\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tFor Document Generator, we use markov chain stochastic model to generate a document using a preexisting document.\r\n\t\t\t\t\t\tIt predicts the next words based on probability from the input document and then generate a new one.\r\n\t\t\t\t\t\tFor Autocomplete, we use a multiway trie to predicts the ending of any prefix inputed. We need an input list of words\r\n\t\t\t\t\t\tfor the autocomplete prediction.\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tMain\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tFor document generator we keep track of the string and its next occurences strings(not in unique order). Then we can generate next word\r\n\t\t\t\t\t\tby just taking a random index from those next words and put it there. Otherwise we would put a period if there is no next words.\r\n\t\t\t\t\t\tOf course, we also need to parse in the original document.\r\n\t\t\t\t\t\tFor Autocomplete, we build a Multiway Trie with children of the next completed words and its own occurence. We build MWT normally unless we find\r\n\t\t\t\t\t\ta duplicate we just increment its occurences. Then we can predict the top ten completion by searching through the trie and for each child\r\n\t\t\t\t\t\tin current node children we can find its top 10 autofill and push it to a vector and sort them all at the end and return the sorted top 10 most occured.\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tClosing\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tEmail me for code. Demonstration will be posted soon.\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t</ContentWrapper>\r\n\t\t\t</ListWrapper>\r\n\t\t</AbsoluteWrapper>\r\n\r\n\r\n\t)\r\n};\r\n\r\nexport default dNcSub;","import React from 'react';\r\nimport AbsoluteWrapper from '../Pages/AbsoluteWrapper';\r\nimport ListWrapper from '../Pages/ListWrapper';\r\nimport ContentWrapper from '../Pages/ContentWrapper';\r\nimport TitleHeaderWrapper from \"../Pages/TitleHeaderWrapper\";\r\nimport HeaderWrapper from \"../Pages/HeaderWrapper\";\r\nimport BodyWrapper from \"../Pages/BodyWrapper\";\r\n\r\n//import reactspring and navlink\r\nimport { useSpring, animated } from 'react-spring';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction kdSub(){\r\n\treturn(\r\n\t\t<AbsoluteWrapper>\r\n\t\t\t<ListWrapper>\r\n\t\t\t\t<ContentWrapper>\r\n\t\t\t\t\t<TitleHeaderWrapper>\r\n\t\t\t\t\t\tKD Tree implementation using BST\r\n\t\t\t\t\t</TitleHeaderWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tIntroduction\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tWe can construct a KD tree using a BST with C++ template. We can have a class called point, in which we can have n-dimensional data\r\n\t\t\t\t\t\tin it. We can then insert it into the BST while adding some helper functions for KD-Tree itself such as build and find nearest neighbor.\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tMain\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tFirst we need to construct a BST with template. Which is fairly easy and self-explainatory.\r\n\t\t\t\t\t\tThen we create a new KDTree class that extend a BST with a \"Point\" class data type.\r\n\t\t\t\t\t\tPoint can have coordinate data in how ever many dimension we want. For simplicity case this will deal with 2D.\r\n\t\t\t\t\t\tThen we can build the Tree using these steps: <br/>\r\n\t\t\t\t\t\t\tInput: list of item, start, end, dimension<br/>\r\n        \t\t\t\t \t * Output: root of subtree<br/>\r\n\t\t\t\t\t         * BuildRecurse:<br/>\r\n\t\t\t\t\t         *  Sort items from start to (end - 1) over dimension<br/>\r\n\t\t\t\t\t         *  Select (leftmost) median for index mid<br/>\r\n\t\t\t\t\t         *  Create node p using median<br/>\r\n\t\t\t\t\t         *  p->left = BuildRecurse(list, start, mid, toggle_dim)<br/>\r\n\t\t\t\t\t         *  p->right = BuildRecurse(list, mid+1, end, toggle_dim)<br/>\r\n\t\t\t\t\t         *  return p<br/>\r\n\t\t\t\t\t    We also need to implement find nearest neightbor. Which is just going down the tree checking the distance and finding the minimal.\r\n\t\t\t\t\t    Here we use DFS with stack and toggle between x and y value to check the next point. and We would mark the lowest distanced one and return it.\r\n\t\t\t\t\t</BodyWrapper>\r\n\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tClosing\r\n\t\t\t\t\t</HeaderWrapper>\r\n\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tDemonstration will be posted soon. Email me if you would like to see the code.\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t</ContentWrapper>\r\n\t\t\t</ListWrapper>\r\n\t\t</AbsoluteWrapper>\r\n\t);\r\n};\r\n\r\nexport default kdSub;","import React from 'react';\r\nimport AbsoluteWrapper from '../Pages/AbsoluteWrapper';\r\nimport ListWrapper from '../Pages/ListWrapper';\r\nimport ContentWrapper from '../Pages/ContentWrapper';\r\nimport TitleHeaderWrapper from \"../Pages/TitleHeaderWrapper\";\r\nimport HeaderWrapper from \"../Pages/HeaderWrapper\";\r\nimport BodyWrapper from \"../Pages/BodyWrapper\";\r\n\r\n//import reactspring and navlink\r\nimport { useSpring, animated } from 'react-spring';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction liveSub(){\r\n\treturn(\r\n\t\t<AbsoluteWrapper>\r\n\t\t\t<ListWrapper>\r\n\t\t\t\t<ContentWrapper>\r\n\t\t\t\t\t<TitleHeaderWrapper>\r\n\t\t\t\t\t\tGame of Life recreation in C and ARM.\r\n\t\t\t\t\t</TitleHeaderWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tIntroduction\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tThis project is a recreation of the Game of Life with a mix of C and ARM assembly language as practice.\r\n\t\t\t\t\t\tBasically all the logics such as updating the board is written in ARM but all the interface is written in C.\r\n\t\t\t\t\t\tThis is a simulation on command line.\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tMain\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tThis is simulation has the same rule set as John Conway's Game of Life: <br/>\r\n\t\t\t\t\t\tAny live cell with fewer than two live neighbours dies, as if by underpopulation.<br/>\r\n\t\t\t\t\t\tAny live cell with two or three live neighbours lives on to the next generation.<br/>\r\n\t\t\t\t\t\tAny live cell with more than three live neighbours dies, as if by overpopulation.<br/>\r\n\t\t\t\t\t\tAny dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.<br/>\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tClosing\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tDemo: (to be added). Email me for the code.\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t</ContentWrapper>\r\n\t\t\t</ListWrapper>\r\n\t\t</AbsoluteWrapper>\r\n\t);\r\n};\r\n\r\nexport default liveSub;","import React from 'react';\r\nimport AbsoluteWrapper from '../Pages/AbsoluteWrapper';\r\nimport ListWrapper from '../Pages/ListWrapper';\r\nimport ContentWrapper from '../Pages/ContentWrapper';\r\nimport TitleHeaderWrapper from \"../Pages/TitleHeaderWrapper\";\r\nimport HeaderWrapper from \"../Pages/HeaderWrapper\";\r\nimport BodyWrapper from \"../Pages/BodyWrapper\";\r\n\r\n//import reactspring and navlink\r\nimport { useSpring, animated } from 'react-spring';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction raySub(){\r\n\treturn(\r\n\t\t<AbsoluteWrapper>\r\n\t\t\t<ListWrapper>\r\n\t\t\t\t<ContentWrapper>\r\n\t\t\t\t\t<TitleHeaderWrapper>\t\r\n\t\t\t\t\t\tDistributed Ray Tracing\r\n\t\t\t\t\t</TitleHeaderWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tIntroduction\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tThis is an implementation of distributed ray tracing with Bezier Patches using an existing CPU ray tracing project.\r\n\t\t\t\t\t\tIn this project I will implement ray casting stochastic jitterring Anti-aliasing, Soft Shadows and Depth of Field.\r\n\t\t\t\t\t\tI will include the executable in the future.\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tAnti-aliasing\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tIt is implemented by jittered, stochastic super-sampling. Meaning, we cast a ray from the eye position into the scene for each pixels.\r\n\t\t\t\t\t\tWe then would take the nearby subpixels(usually in an nxn box) and average them and use it as a result of the current pixel.\r\n\t\t\t\t\t\tThus ultimately soften the edges and resulting in smoother edges.\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tSoft Shadows\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tThis is implemented by looping through every pixels and at every light source(not a single point meaning it is an area of light source).\r\n\t\t\t\t\t\tThen we pick a jittered, stochastic position on that light(same implementation as Anti-aliasing except not on subpixels levels).\r\n\t\t\t\t\t\tThen we cast a shadow feeler, a ray toward a light with displacement calculated from the stochastic position to see if it is obstructed.\r\n\t\t\t\t\t\tThen we would calculated the amount of light that hit the current pixel like normal. This will result in softer shadow as sometime the shadowfeeler would\r\n\t\t\t\t\t\treturn false as it is being displaced to another position near the edge of the shadow. \r\n\t\t\t\t\t\tNoted that there is a more accurate way to implement soft shadow but it would take a significant more time since this is a cpu renderer.\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tDepth of Field\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tHere we stochastically jittter the eyes(camera) position to simulate our cone of vision so that it is wider to create a sense of depth.\r\n\t\t\t\t\t\tWith our eyes bigger we can cast ray to each pixel differently, and if the position is in focus every stochastic eyes position ray would return\r\n\t\t\t\t\t\tthe same color value for all of the same distance. Otherwise it will look very random and out of focus.\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tPDF with demonstrations\t\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper >\r\n\t\t\t\t\t\t<a href=\"https://soliloquy.s-ul.eu/UQhDqQ1L\" target=\"_blank\"> https://soliloquy.s-ul.eu/UQhDqQ1L </a>\r\n\t\t\t\t\t</BodyWrapper>\r\n\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tCode and EXE\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tPlease email me for the code and EXE to be posted soon.\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t</ContentWrapper>\r\n\t\t\t</ListWrapper>\r\n\t\t</AbsoluteWrapper>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t)\r\n}\r\n\r\nexport default raySub;","import React from 'react';\r\nimport AbsoluteWrapper from '../Pages/AbsoluteWrapper';\r\nimport ListWrapper from '../Pages/ListWrapper';\r\nimport ContentWrapper from '../Pages/ContentWrapper';\r\nimport TitleHeaderWrapper from \"../Pages/TitleHeaderWrapper\";\r\nimport HeaderWrapper from \"../Pages/HeaderWrapper\";\r\nimport BodyWrapper from \"../Pages/BodyWrapper\";\r\n\r\n//import reactspring and navlink\r\nimport { useSpring, animated } from 'react-spring';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction shaderSub(){\r\n\treturn (\r\n\t\t<AbsoluteWrapper>\r\n\t\t\t<ListWrapper>\r\n\t\t\t\t<ContentWrapper>\r\n\t\t\t\t\t<TitleHeaderWrapper>\r\n\t\t\t\t\t\tShader Program Projects\r\n\t\t\t\t\t</TitleHeaderWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tIntroduction\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tThis section consists of 4 projects that deals with Shader Programming.\r\n\t\t\t\t\t\tThey consists of: <br/>\r\n\t\t\t\t\t\tWater Wave Shader<br/>\r\n\t\t\t\t\t\tDithering with Fragment Shader<br/>\r\n\t\t\t\t\t\tMesh Generation with Geometry Shader<br/>\r\n\t\t\t\t\t\tPost-Processing Shader<br/>\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<HeaderWrapper>\r\n\t\t\t\t\t\tMain\r\n\t\t\t\t\t</HeaderWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tWater Wave Shader: <br/>\r\n\t\t\t\t\t\tThis shader generate water waves using the formula <br/>\r\n\t\t\t\t\t\theight = amp * cos( 2*pi*( d / lambda – freq*t ) ). <br/>\r\n\t\t\t\t\t\tand a flat floor mesh that is passed in from a different program.\r\n\t\t\t\t\t\tThis also calculates the normal vector so we can have good lighting for the fragment shader calculations.\r\n\t\t\t\t\t\tThis project allows for more than one wave to be generated thus can result in realistic random-looking waves.\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\t<img src = \"https://soliloquy.s-ul.eu/UalxdW0m\" class=\"img-fluid mx-auto d-block\" width=\"50%\"></img>\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tDithering with Fragment Shader<br/>\r\n\t\t\t\t\t\tExplaination of Dithering: https://en.wikipedia.org/wiki/Dither<br/>\r\n\t\t\t\t\t\tIn this project I will be: <br/>\r\n\t\t\t\t\t\tDithering to k discretization levels, controlled by up/down arrows.\r\n      \t\t\t\t\tDithering in grayscale mode or independently dithering each color component.\r\n      \t\t\t\t\tUsing random dithering to set color probabilistically<br/>\r\n\t\t\t\t\t</BodyWrapper>\r\n\t\t\t\t\t<BodyWrapper>\r\n\t\t\t\t\t\tMesh Generation with Geometry Shader<br/>\r\n\t\t\t\t\t\tIn this shader program I generated scalable bumps floor mesh from a flat floor mesh.\r\n\t\t\t\t\t\tThe geometry shader raised part of the floor to demonstrate the use of geometry shader.\r\n\t\t\t\t\t\tWith the geometry of the original mesh change the normal map need to also be changed to calculate the right\r\n\t\t\t\t\t\tlighting levels for the generated mesh so that will also be calculated too.<br/>\r\n\t\t\t\t\t\thttps://soliloquy.s-ul.eu/9RKj1ETS\r\n\t\t\t\t\t</BodyWrapper>\r\n\r\n\t\t\t\t\t<div className= \"position-relative p-4 d-flex rounded h5\">\r\n\t\t\t\t\t\tPost-Processing Shader<br/>\r\n\t\t\t\t\t\tHere is a detailed PDF explaining this project: <br/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<a href=\"https://soliloquy.s-ul.eu/pso3qC29\" className=\"position-relative p-4 d-flex rounded h3\">\r\n\t\t\t\t\t\thttps://soliloquy.s-ul.eu/pso3qC29\r\n\t\t\t\t\t</a>\r\n\r\n\t\t\t\t</ContentWrapper>\r\n\t\t\t</ListWrapper>\r\n\t\t</AbsoluteWrapper>\r\n\r\n\t)\r\n};\r\n\r\nexport default shaderSub;","import React, { useContext } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TopBar from './topBar/topBar.js'\n\n//import react router\nimport { Switch, Route, useLocation, BrowserRouter} from 'react-router-dom';\n\n//import pages\nimport {\n    Home,\n    Photography,\n    Computer,\n    About\n} from './Pages'\n\n//import subpages\nimport{\n    rgbSub,\n    thoSub,\n    actorSub,\n    boardSub,\n    dNcSub,\n    kdSub,\n    lifeSub,\n    raySub,\n    shaderSub\n} from './SubPages'\n\n//import reactspring\nimport { animated, useTransition } from 'react-spring';\n\n\n\nfunction App() {\n\n    //const { location } = useContext(__RouterContext);\n    const location = useLocation();\n    const transitions = useTransition(location, location => location.pathname, {\n        from: { opacity: 0, transform: \"translate(100%, 0%)\" },\n        enter: { opacity: 1, transform: \"translate(0%, 0%)\" },\n        leave: { opacity: 0, transform: \"translate(-50%, 0%)\" }\n    });\n    \n\n\n    return (\n        <>\n                <TopBar/>\n                <main className=\"container-fluid\">\n                    {transitions.map(({ item,props,key }) => (\n                      <animated.div key={key} style={props} className=\"position-relative\">\n\n                          <Switch location={item}>\n                            <Route exact path=\"/\" component={Home}/>\n                            <Route exact path=\"/computer\" component={Computer}/>\n                            <Route exact path=\"/photography\" component={Photography}/>\n                            <Route exact path = \"/about\" component={About}/>\n                            <Route exact path=\"/computer/1\" component={rgbSub}/>\n                            <Route exact path=\"/computer/2\" component={raySub}/>\n                            <Route exact path=\"/computer/3\" component={shaderSub}/>\n                            <Route exact path=\"/computer/4\" component={thoSub}/>\n                            <Route exact path=\"/computer/5\" component={boardSub}/>\n                            <Route exact path=\"/computer/6\" component={kdSub}/>\n                            <Route exact path=\"/computer/7\" component={lifeSub}/>\n                            <Route exact path=\"/computer/8\" component={actorSub}/>\n                            <Route exact path=\"/computer/9\" component={dNcSub}/>\n                          </Switch>\n                      </animated.div>  \n                    ))}\n                </main>\t\n    \t</>\n    );\n};\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component, useEffect } from \"react\";\nimport {useLocation} from \"react-router-dom\";\n\nexport default function ScrollToTop(){\n\tconst {pathname} = useLocation();\n\n\tuseEffect(() =>{\n\t\twindow.scrollTo(0,0);\n\t}, [pathname]);\n\treturn null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from 'react-router-dom'\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ScrollToTop from './Pages/ScrollToTop.js'\n\nReactDOM.render(\n\t<HashRouter basename=\"/\">\n\t\t<ScrollToTop/>\n\t\t<App/>\n\t</HashRouter>\n\t, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}